# Simulation Parameters
simulation:
  dt: 0.1              # Simulation time step (seconds)
  num_episodes: 2      # Number of episodes to run
  max_steps: 10000      # Max steps per episode
  mode: 'multi'        # 'single' or 'multi'
  num_agents: 2
  render_mode: 'human' # 'human', 'rgb_array', or None
  render_fps: 30
  print_lidar: true   # Print LiDAR values for RL agents during simulation

# Training Parameters
training:
  num_episodes: 1000     # Number of training episodes
  max_steps: 5000       # Max steps per episode
  render_mode: None # 'human', 'rgb_array', or None (Usually None during training)
  render_fps: 5        # Frames per second for rendering (if render_mode is 'human')
  save_frequency: 10   # Save model every N episodes
  resume_training: False # if True, we load latest model from the model_path and then start the training
  learning_rate: 0.01 # Learning rate for the optimizer
  discount_factor: 0.9 # Discount factor for the optimizer
  rl_algo: 'reinforce'   # 'ppo', 'td3', 'sac', 'reinforce'

# Track Parameters (Example for Oval)
track:
  type: 'oval'
  length: 100.0               # Length of straight sections
  radius: 30.0                # Radius of curved sections
  width: 20.0                 # Total width of the track (2 * omega_r from image)
  start_line_x: 0.0           # X-coordinate of the start/end line center
  start_lane: 'bottom'   # 'top' or 'bottom'

# Environment Specific Configuration
environment:
  # List the observation components to include in the observation space
  # Available keys (can be expanded): 'x', 'y', 'v', 'theta', 'steer_angle', 'dist_to_centerline', ...
  observation_components:
    - 'v'
    - 'steer_angle'
    - 'accel'
    - 'dist_to_centerline'
    - 'lidar'

# Car Parameters
car:
  wheelbase: 2.5         # L (meters)
  mass: 1500             # Mass (kg)
  max_speed: 20.0        # m/s
  min_accel: -5.0        # m/s^2 (braking)
  max_accel: 3.0         # m/s^2
  max_steer_angle: 0.6   # radians (~34 degrees)
  width: 1.8             # For collision/visualization
  length: 4.0            # For collision/visualization
  collision_radius: 1.5  # Simplified collision check radius

  # --- More Realistic Physics Params --- 
  coeff_drag: 0.8         # Air resistance coefficient (Cd * A * rho / 2)
  coeff_rolling_resistance: 60.0 # Rolling resistance coefficient
  coeff_friction: 1.1      # Combined tire longitudinal friction coefficient (relative)
  coeff_cornering_stiffness: 15.0 # Tire lateral stiffness factor (simplified grip)
  max_engine_force: 4500   # Max forward force from engine (N)
  max_brake_force: 6000    # Max backward force from brakes (N)
  gravity: 9.81          # Acceleration due to gravity (m/s^2)
  # ------------------------------------

  # Car LiDAR sensor
  lidar_num_beams: 24
  lidar_max_range: 50.0
  lidar_eps: 1e-3

# Agent Configuration Details
# The simulation script will select the config based on the chosen agent type
agent_config:
  human:
    # No specific params needed currently
    description: "Controlled by user via keyboard arrow keys."
  random:
    description: "Takes random actions within the action space."
  mpc:
    # type: 'mpc' # Type is already known from simulation.agent_type
    description: "Model Predictive Control agent with path tracking."
    horizon: 8      # N - Prediction horizon
    # MPC Cost Function Weights (example values, TUNE THESE!)
    Q_progress: 2.0
    Q_pos: 1.0       # Penalty for deviation from reference path x,y
    Q_head: 0.2       # Penalty for heading error
    Q_vel: 5.0        # Penalty for velocity error from reference
    R_accel: 0.5      # Penalty for large acceleration commands
    R_steer_cmd: 0.2  # Penalty for large target steering commands
    R_steer_rate: 0.05 # Penalty for rate of change of target steering commands
    # MPC Model/Constraint Parameters
    mpc_max_accel: 3.0  # Max acceleration MPC will command (m/s^2)
    mpc_min_accel: -5.0 # Max deceleration MPC will command (m/s^2)
    max_steer_rate_sim: 3.14 # rad/s, how fast steer_angle_vehicle changes towards target_steer_cmd in MPC model

    # --- NEW: Configuration Flags for Enabling/Disabling MPC Components ---
    # Cost Components (set to false to disable)
    use_progress_cost: true
    use_path_tracking_cost: false
    use_control_effort_cost: false
    use_heading_cost: true
    use_velocity_cost: true
    use_steer_rate_cost: false
    use_terminal_cost: false         # Enables/disables the entire terminal cost block

    # Constraint Components (set to false to disable)
    apply_track_boundaries: true
    # apply_collision_avoidance will be true if max_opponents_to_consider > 0, otherwise false.
    # You can explicitly set it to false here to override even if max_opponents_to_consider > 0.
    apply_collision_avoidance: true # Default is (max_opponents_to_consider > 0)
    max_opponents_to_consider: 1 # Max opponents MPC will create constraints for
    default_opponent_collision_radius: 1.5 # Used if opponent radius not in prediction

    # Optional: Soft Track Boundaries (if you want to experiment with them)
    use_soft_track_boundaries: false # Set to true to use slack variables for track boundaries
    soft_boundary_penalty: 1000.0    # Penalty weight for the slack variables if soft boundaries are used

    # Optional: Solver options for IPOPT (passed directly to CasADi)
    solver_options:
      ipopt.max_iter: 50
      ipopt.tol: 1.0e-1
      ipopt.constr_viol_tol: 1.0e-1

# Agent Configuration (Example for 3 agents)
# agents:
#   agent_0:
#     type: 'human'
#     # type: 'rl'         # rl, mpc, human, random
#     # model_path: 'models/multi_agent/agent_1_model.zip' # Path for RL model
#     start_pos_idx: 0     # Index for starting position
#   agent_1:
#     type: 'mpc'          # rl, mpc, human, random
#     start_pos_idx: 3     # Index for starting position


agents:
  agent_0:
    type: 'human'
    # model_path: 'models/multi_agent/agent_0_model.zip'
    start_pos_idx: 0
  agent_1:
    type: 'random'
    # model_path: 'models/multi_agent/agent_1_model.zip'
    start_pos_idx: 1

# RL Hyperparameters (Example - adjust based on library/algo)
rl:
  learning_rate: 0.0003
  discount_factor: 0.99
  model_path: 'models/single_agent/trained_model.zip'  # Default model path for single agent
  # ... other hyperparameters

# UI Configuration
ui:
  sidebar_columns:
    # Define columns for the sidebar information table.
    # 'key': How data is accessed (from car data, or special keys like 'agent_id', 'lap', 'agent_type').
    # 'header': Text displayed in the table header.
    # 'format': Python f-string format specifier (e.g., '.1f' for one decimal place).
    # WARNING: For keys other than 'agent_id', 'lap', 'agent_type', the UI will attempt to find the key
    #          in the car's data. Ensure these keys exist in the car data or observation components
    #          if you want to display them. 'dist_to_centerline' is calculated separately.
    - { key: 'agent_id', header: 'Agent', format: '' }
    - { key: 'agent_type', header: 'Type', format: '' }
    - { key: 'x', header: 'X', format: '.1f' }
    - { key: 'y', header: 'Y', format: '.1f' }
    - { key: 'v', header: 'Spd', format: '.1f' }
    - { key: 'lap', header: 'Lap', format: 'd' }
    - { key: 'dist_to_centerline', header: 'dC', format: '.2f' }
    - { key: 'dist_to_boundary', header: 'dB', format: '.2f' }
    - { key: 'total_progress', header: 'P%', format: '.2f'}
    # Add or remove columns as needed